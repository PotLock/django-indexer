# Generated by Django 5.0.4 on 2024-04-29 22:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="NadabotRegistry",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        help_text="Nadabot registry id.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="registry_id",
                        serialize=False,
                        to="accounts.account",
                    ),
                ),
                (
                    "default_human_threshold",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="default human threshold.",
                        verbose_name="default human threshold",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        help_text="Registry creation date.", verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        help_text="Registry last update date.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "source_metadata",
                    models.JSONField(
                        help_text="nadabot registry source metadata.",
                        verbose_name="source metadata",
                    ),
                ),
                (
                    "admins",
                    models.ManyToManyField(
                        help_text="registry admins.",
                        related_name="admin_registry",
                        to="accounts.account",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Nadabot Registry owner.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nadabot",
                        to="accounts.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.PositiveIntegerField(
                        help_text="Provider id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="provider id",
                    ),
                ),
                (
                    "contract_id",
                    models.CharField(
                        help_text="Contract ID of the external contract that is the source of this provider.",
                        max_length=100,
                        verbose_name="contract ID",
                    ),
                ),
                (
                    "method_name",
                    models.CharField(
                        help_text="Method name of the external contract that is the source of this provider.",
                        max_length=100,
                        verbose_name="method name",
                    ),
                ),
                (
                    "provider_name",
                    models.CharField(
                        help_text="Name of the provider, e.g. 'I Am Human'.",
                        max_length=64,
                        verbose_name="provider name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the provider.",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Active", "Active"),
                            ("Deactivated", "Deactivated"),
                        ],
                        help_text="Status of the provider.",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Admin notes, e.g. reason for flagging or marking inactive.",
                        null=True,
                        verbose_name="admin notes",
                    ),
                ),
                (
                    "default_weight",
                    models.PositiveIntegerField(
                        help_text="Default weight for this provider, e.g. 100.",
                        verbose_name="default weight",
                    ),
                ),
                (
                    "gas",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Custom gas amount required.",
                        null=True,
                        verbose_name="gas",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        help_text="Optional tags.",
                        null=True,
                        verbose_name="tags",
                    ),
                ),
                (
                    "icon_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional icon URL.",
                        null=True,
                        verbose_name="icon URL",
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional external URL.",
                        null=True,
                        verbose_name="external URL",
                    ),
                ),
                (
                    "submitted_by",
                    models.CharField(
                        help_text="User who submitted this provider.",
                        max_length=100,
                        verbose_name="submitted by",
                    ),
                ),
                (
                    "submitted_at_ms",
                    models.DateTimeField(
                        help_text="Timestamp of when this provider was submitted.",
                        verbose_name="submitted at (milliseconds)",
                    ),
                ),
                (
                    "stamp_count",
                    models.BigIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Total number of times this provider has been used successfully.",
                        verbose_name="stamp count",
                    ),
                ),
                (
                    "stamp_validity_ms",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Milliseconds that stamps from this provider are valid for before they expire.",
                        null=True,
                        verbose_name="stamp validity",
                    ),
                ),
                (
                    "account_id_arg_name",
                    models.CharField(
                        help_text="Name of account ID argument, e.g. 'account_id' or 'accountId' or 'account'.",
                        max_length=100,
                        verbose_name="account ID argument name",
                    ),
                ),
                (
                    "custom_args",
                    models.CharField(
                        help_text="Custom args as Base64VecU8.",
                        null=True,
                        verbose_name="custom args",
                    ),
                ),
                (
                    "registry",
                    models.ForeignKey(
                        help_text="registry under which provider was registered",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nadabot.nadabotregistry",
                        verbose_name="registry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Stamp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "verification_date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="The date of verification.",
                        verbose_name="verification date",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        help_text="The provider the user verified with.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nadabot.provider",
                        verbose_name="provider",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who earned the stamp.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.account",
                        verbose_name="user",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="provider",
            index=models.Index(fields=["id", "status"], name="idx_provider_id_status"),
        ),
    ]
