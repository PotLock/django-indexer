# Generated by Django 5.0.6 on 2024-09-18 23:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0006_alter_account_near_social_profile_data"),
        ("tokens", "0006_rename_id_token_account"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProjectContact",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("value", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="ProjectContract",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("contract_address", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="ProjectFundingHistory",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("source", models.CharField(max_length=255)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=20)),
                ("denomination", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProjectRepository",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(max_length=255)),
                ("url", models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name="StellarEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ledger_sequence", models.BigIntegerField()),
                ("event_type", models.CharField(max_length=100)),
                ("contract_id", models.CharField(max_length=56, null=True)),
                ("data", models.JSONField()),
                ("ingested_at", models.DateTimeField()),
                (
                    "transaction_hash",
                    models.CharField(
                        blank=True,
                        help_text="Transaction hash.",
                        max_length=64,
                        null=True,
                        verbose_name="transaction hash",
                    ),
                ),
                ("processed", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "on_chain_id",
                    models.IntegerField(
                        help_text="Project id in contract",
                        unique=True,
                        verbose_name="contract project id",
                    ),
                ),
                ("image_url", models.URLField()),
                ("video_url", models.URLField()),
                ("name", models.CharField(max_length=255)),
                ("overview", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NEW", "New"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("COMPLETED", "Completed"),
                        ],
                        max_length=50,
                    ),
                ),
                ("submited_ms", models.BigIntegerField()),
                ("updated_ms", models.BigIntegerField(blank=True, null=True)),
                (
                    "admins",
                    models.ManyToManyField(
                        help_text="Project Admin",
                        related_name="admin_projects",
                        to="accounts.account",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_projects",
                        to="accounts.account",
                    ),
                ),
                (
                    "payout_address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payout_projects",
                        to="accounts.account",
                    ),
                ),
                (
                    "team_members",
                    models.ManyToManyField(
                        help_text="Project Team Member",
                        related_name="team_members",
                        to="accounts.account",
                    ),
                ),
                (
                    "contacts",
                    models.ManyToManyField(
                        help_text="project contacts.",
                        related_name="contact_lists",
                        to="grantpicks.projectcontact",
                    ),
                ),
                (
                    "contracts",
                    models.ManyToManyField(
                        help_text="project contracts.",
                        related_name="contract_list",
                        to="grantpicks.projectcontract",
                    ),
                ),
                (
                    "repositories",
                    models.ManyToManyField(
                        help_text="project repositories.",
                        related_name="repository_list",
                        to="grantpicks.projectrepository",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Round",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Round ID in DB (does not necessarily correspond to on-chain ID).",
                        primary_key=True,
                        serialize=False,
                        verbose_name="round id",
                    ),
                ),
                (
                    "on_chain_id",
                    models.IntegerField(
                        help_text="Round ID in contract",
                        unique=True,
                        verbose_name="contract round ID",
                    ),
                ),
                (
                    "deployed_at",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Round deployment date.",
                        verbose_name="deployed at",
                    ),
                ),
                (
                    "name",
                    models.TextField(help_text="Round name.", verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Round description.", verbose_name="description"
                    ),
                ),
                (
                    "expected_amount",
                    models.CharField(
                        help_text="Expected amount.", verbose_name="expected amount"
                    ),
                ),
                (
                    "base_currency",
                    models.CharField(
                        blank=True,
                        help_text="Base currency.",
                        max_length=64,
                        null=True,
                        verbose_name="base currency",
                    ),
                ),
                (
                    "application_start",
                    models.DateTimeField(
                        help_text="Round application start date.",
                        null=True,
                        verbose_name="application start",
                    ),
                ),
                (
                    "application_end",
                    models.DateTimeField(
                        help_text="Round application end date.",
                        null=True,
                        verbose_name="application end",
                    ),
                ),
                (
                    "voting_start",
                    models.DateTimeField(
                        help_text="Round voting start date.",
                        verbose_name="voting start",
                    ),
                ),
                (
                    "voting_end",
                    models.DateTimeField(
                        help_text="Round voting end date.", verbose_name="voting end"
                    ),
                ),
                (
                    "use_whitelist",
                    models.BooleanField(
                        help_text="Use whitelist.", verbose_name="use whitelist"
                    ),
                ),
                (
                    "use_vault",
                    models.BooleanField(
                        help_text="Use vault.", verbose_name="use vault"
                    ),
                ),
                (
                    "num_picks_per_voter",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of picks per voter.",
                        null=True,
                        verbose_name="num picks per voter",
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Max participants.",
                        null=True,
                        verbose_name="max participants",
                    ),
                ),
                (
                    "allow_applications",
                    models.BooleanField(
                        help_text="Allow applications.",
                        verbose_name="allow applications",
                    ),
                ),
                (
                    "is_video_required",
                    models.BooleanField(
                        help_text="Is video required.", verbose_name="is video required"
                    ),
                ),
                (
                    "cooldown_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="Round cooldown end date.",
                        null=True,
                        verbose_name="cooldown end",
                    ),
                ),
                (
                    "cooldown_period_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Round cooldown period in ms.",
                        null=True,
                        verbose_name="cooldown period in ms",
                    ),
                ),
                (
                    "compliance_req_desc",
                    models.TextField(
                        help_text="Compliance req desc.",
                        verbose_name="compliance req desc",
                    ),
                ),
                (
                    "compliance_period_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Compliance period in ms.",
                        null=True,
                        verbose_name="compliance period in ms",
                    ),
                ),
                (
                    "compliance_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="Compliance end date.",
                        null=True,
                        verbose_name="compliance end",
                    ),
                ),
                (
                    "allow_remaining_dist",
                    models.BooleanField(
                        help_text="Allow remaining dist.",
                        verbose_name="allow remaining dist",
                    ),
                ),
                (
                    "remaining_dist_memo",
                    models.CharField(
                        blank=True,
                        help_text="Remaining dist memo.",
                        max_length=255,
                        null=True,
                        verbose_name="remaining dist memo",
                    ),
                ),
                (
                    "remaining_dist_at_ms",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Remaining dist at ms.",
                        null=True,
                        verbose_name="remaining dist at ms",
                    ),
                ),
                (
                    "current_vault_balance",
                    models.CharField(
                        blank=True,
                        help_text="Current vault balance.",
                        max_length=255,
                        null=True,
                        verbose_name="current vault balance",
                    ),
                ),
                (
                    "current_vault_balance_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Current vault balance in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="current vault balance in USD",
                    ),
                ),
                (
                    "referrer_fee_basis_points",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Referrer fee basis points.",
                        null=True,
                        verbose_name="referrer fee basis points",
                    ),
                ),
                (
                    "vault_total_deposits",
                    models.CharField(
                        help_text="Vault total deposits.",
                        null=True,
                        verbose_name="vault total deposits",
                    ),
                ),
                (
                    "vault_total_deposits_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Vault total deposits in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="vault total deposits in USD",
                    ),
                ),
                (
                    "round_complete",
                    models.DateTimeField(
                        blank=True,
                        help_text="Round complete date.",
                        null=True,
                        verbose_name="round complete",
                    ),
                ),
                (
                    "admins",
                    models.ManyToManyField(
                        help_text="Round admins.",
                        related_name="admin_rounds",
                        to="accounts.account",
                    ),
                ),
                (
                    "approved_projects",
                    models.ManyToManyField(
                        help_text="Projects Approved for round.",
                        related_name="rounds_approved_in",
                        to="grantpicks.project",
                    ),
                ),
                (
                    "contacts",
                    models.ManyToManyField(
                        help_text="Round contacts.",
                        related_name="round_contacts",
                        to="grantpicks.projectcontact",
                    ),
                ),
                (
                    "factory_contract",
                    models.ForeignKey(
                        help_text="Round factory account ID.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spawned_rounds",
                        to="accounts.account",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Round owner.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_rounds",
                        to="accounts.account",
                    ),
                ),
                (
                    "remaining_dist_address",
                    models.ForeignKey(
                        blank=True,
                        help_text="Remaining dist address.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rounds_with_remaining_dist",
                        to="accounts.account",
                    ),
                ),
                (
                    "remaining_dist_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Account responsible for remaining distribution.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="remaining_dist_rounds",
                        to="accounts.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoundDeposit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Deposit id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="deposit id",
                    ),
                ),
                (
                    "on_chain_id",
                    models.IntegerField(
                        help_text="Deposit ID in contract",
                        unique=True,
                        verbose_name="contract deposit ID",
                    ),
                ),
                (
                    "amount",
                    models.CharField(
                        help_text="Deposit amount.", verbose_name="amount"
                    ),
                ),
                (
                    "amount_in_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Deposit amount in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="amount deposited in USD",
                    ),
                ),
                (
                    "protocol_fee",
                    models.CharField(
                        help_text="protocol fee amount.",
                        null=True,
                        verbose_name="protocol_fee",
                    ),
                ),
                (
                    "referrer_fee",
                    models.CharField(
                        help_text="referrer fee amount.",
                        null=True,
                        verbose_name="referrer_fee",
                    ),
                ),
                (
                    "deposit_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Deposit date.",
                        null=True,
                        verbose_name="deposit at",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        blank=True,
                        help_text="Transaction hash.",
                        null=True,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "depositor",
                    models.ForeignKey(
                        help_text="Deposit maker.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="round_deposits",
                        to="accounts.account",
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        help_text="Round that this deposit is for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="deposits",
                        to="grantpicks.round",
                    ),
                ),
                (
                    "token",
                    models.ForeignKey(
                        help_text="Deposit token.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="round_deposits",
                        to="tokens.token",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        blank=True,
                        help_text="Transaction hash.",
                        null=True,
                        verbose_name="transaction hash",
                    ),
                ),
                ("voted_at", models.DateTimeField()),
                (
                    "round",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="grantpicks.round",
                    ),
                ),
                (
                    "voter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="accounts.account",
                    ),
                ),
            ],
            options={
                "unique_together": {("round", "voter", "voted_at")},
            },
        ),
        migrations.CreateModel(
            name="VotePair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pair_id", models.PositiveIntegerField()),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vote_pairs",
                        to="grantpicks.project",
                    ),
                ),
                (
                    "vote",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pairs",
                        to="grantpicks.vote",
                    ),
                ),
            ],
            options={
                "unique_together": {("vote", "pair_id")},
            },
        ),
    ]
