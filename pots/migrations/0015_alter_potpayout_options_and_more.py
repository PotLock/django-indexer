# Generated by Django 5.0.6 on 2024-09-26 00:10

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0006_alter_account_near_social_profile_data"),
        ("grantpicks", "0001_initial"),
        ("pots", "0014_alter_potapplication_unique_together_and_more"),
        ("tokens", "0006_rename_id_token_account"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="potpayout",
            options={"verbose_name_plural": "Pot Payouts"},
        ),
        migrations.AlterUniqueTogether(
            name="potpayoutchallenge",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="potpayout",
            name="memo",
            field=models.CharField(
                blank=True,
                help_text="Round payout memo",
                null=True,
                verbose_name="payout memo",
            ),
        ),
        migrations.AddField(
            model_name="potpayout",
            name="on_chain_id",
            field=models.IntegerField(
                blank=True,
                db_index=True,
                help_text="Payout id in contract",
                null=True,
                unique=True,
                verbose_name="contract payout id",
            ),
        ),
        migrations.AddField(
            model_name="potpayout",
            name="round",
            field=models.ForeignKey(
                blank=True,
                help_text="Round that this payout is for.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payouts",
                to="grantpicks.round",
            ),
        ),
        migrations.AddField(
            model_name="potpayoutchallenge",
            name="round",
            field=models.ForeignKey(
                blank=True,
                help_text="Round that this payout challenge is for.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payouts_challenges",
                to="grantpicks.round",
            ),
        ),
        migrations.AddField(
            model_name="potpayoutchallengeadminresponse",
            name="round",
            field=models.ForeignKey(
                blank=True,
                help_text="Round that this payout challenge response is for.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payouts_challenge_responses",
                to="grantpicks.round",
            ),
        ),
        migrations.AlterField(
            model_name="potpayout",
            name="pot",
            field=models.ForeignKey(
                help_text="Pot that this payout is for.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payouts",
                to="pots.pot",
            ),
        ),
        migrations.AlterField(
            model_name="potpayoutchallenge",
            name="pot",
            field=models.ForeignKey(
                help_text="Pot challenged.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="challenges",
                to="pots.pot",
            ),
        ),
        migrations.AddConstraint(
            model_name="potpayout",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("pot__isnull", False), ("round__isnull", True)),
                    models.Q(("pot__isnull", True), ("round__isnull", False)),
                    _connector="OR",
                ),
                name="payout_pot_or_round",
            ),
        ),
        migrations.AddConstraint(
            model_name="potpayoutchallenge",
            constraint=models.UniqueConstraint(
                fields=("challenger", "pot"), name="unique_challenger_pot"
            ),
        ),
        migrations.AddConstraint(
            model_name="potpayoutchallenge",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("pot__isnull", False), ("round__isnull", True)),
                    models.Q(("pot__isnull", True), ("round__isnull", False)),
                    _connector="OR",
                ),
                name="payout_challenge_pot_or_round",
            ),
        ),
    ]
