# Generated by Django 5.0.4 on 2024-04-07 14:27

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.CharField(
                        db_index=True,
                        help_text="On-chain account address.",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="address",
                    ),
                ),
                (
                    "total_donations_received_usd",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total donations received in USD.",
                        max_digits=20,
                        verbose_name="total donations received in USD",
                    ),
                ),
                (
                    "total_donated_usd",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total donated in USD.",
                        max_digits=20,
                        verbose_name="total donated in USD",
                    ),
                ),
                (
                    "total_matching_pool_allocations_usd",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total matching pool allocations in USD.",
                        max_digits=20,
                        verbose_name="total matching pool allocations in USD",
                    ),
                ),
                (
                    "donors_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of donors.",
                        verbose_name="donors count",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Pot",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        help_text="Pot account ID.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="pot",
                        serialize=False,
                        to="indexer_app.account",
                    ),
                ),
                (
                    "deployed_at",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Pot deployment date.",
                        verbose_name="deployed at",
                    ),
                ),
                (
                    "source_metadata",
                    models.JSONField(
                        help_text="Pot source metadata.", verbose_name="source metadata"
                    ),
                ),
                ("name", models.TextField(help_text="Pot name.", verbose_name="name")),
                (
                    "description",
                    models.TextField(
                        help_text="Pot description.", verbose_name="description"
                    ),
                ),
                (
                    "max_approved_applicants",
                    models.PositiveIntegerField(
                        help_text="Max approved applicants.",
                        verbose_name="max approved applicants",
                    ),
                ),
                (
                    "base_currency",
                    models.CharField(
                        help_text="Base currency.",
                        max_length=64,
                        null=True,
                        verbose_name="base currency",
                    ),
                ),
                (
                    "application_start",
                    models.DateTimeField(
                        help_text="Pot application start date.",
                        verbose_name="application start",
                    ),
                ),
                (
                    "application_end",
                    models.DateTimeField(
                        help_text="Pot application end date.",
                        verbose_name="application end",
                    ),
                ),
                (
                    "matching_round_start",
                    models.DateTimeField(
                        help_text="Pot matching round start date.",
                        verbose_name="matching round start",
                    ),
                ),
                (
                    "matching_round_end",
                    models.DateTimeField(
                        help_text="Pot matching round end date.",
                        verbose_name="matching round end",
                    ),
                ),
                (
                    "registry_provider",
                    models.CharField(
                        help_text="Registry provider.",
                        max_length=64,
                        null=True,
                        verbose_name="registry provider",
                    ),
                ),
                (
                    "min_matching_pool_donation_amount",
                    models.CharField(
                        help_text="Min matching pool donation amount.",
                        max_length=64,
                        verbose_name="min matching pool donation amount",
                    ),
                ),
                (
                    "sybil_wrapper_provider",
                    models.CharField(
                        help_text="Sybil wrapper provider.",
                        max_length=64,
                        null=True,
                        verbose_name="sybil wrapper provider",
                    ),
                ),
                (
                    "custom_sybil_checks",
                    models.CharField(
                        help_text="Custom sybil checks.",
                        max_length=64,
                        null=True,
                        verbose_name="custom sybil checks",
                    ),
                ),
                (
                    "custom_min_threshold_score",
                    models.PositiveIntegerField(
                        help_text="Custom min threshold score.",
                        null=True,
                        verbose_name="custom min threshold score",
                    ),
                ),
                (
                    "referral_fee_matching_pool_basis_points",
                    models.PositiveIntegerField(
                        help_text="Referral fee matching pool basis points.",
                        verbose_name="referral fee matching pool basis points",
                    ),
                ),
                (
                    "referral_fee_public_round_basis_points",
                    models.PositiveIntegerField(
                        help_text="Referral fee public round basis points.",
                        verbose_name="referral fee public round basis points",
                    ),
                ),
                (
                    "chef_fee_basis_points",
                    models.PositiveIntegerField(
                        help_text="Chef fee basis points.",
                        verbose_name="chef fee basis points",
                    ),
                ),
                (
                    "total_matching_pool",
                    models.CharField(
                        help_text="Total matching pool.",
                        max_length=64,
                        verbose_name="total matching pool",
                    ),
                ),
                (
                    "total_matching_pool_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total matching pool in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="total matching pool in USD",
                    ),
                ),
                (
                    "matching_pool_balance",
                    models.CharField(
                        help_text="Matching pool balance.",
                        max_length=64,
                        verbose_name="matching pool balance",
                    ),
                ),
                (
                    "matching_pool_donations_count",
                    models.PositiveIntegerField(
                        help_text="Matching pool donations count.",
                        verbose_name="matching pool donations count",
                    ),
                ),
                (
                    "total_public_donations",
                    models.CharField(
                        help_text="Total public donations.",
                        max_length=64,
                        verbose_name="total public donations",
                    ),
                ),
                (
                    "total_public_donations_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total public donations in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="total public donations in USD",
                    ),
                ),
                (
                    "public_donations_count",
                    models.PositiveIntegerField(
                        help_text="Public donations count.",
                        verbose_name="public donations count",
                    ),
                ),
                (
                    "cooldown_end",
                    models.DateTimeField(
                        help_text="Pot cooldown end date.",
                        null=True,
                        verbose_name="cooldown end",
                    ),
                ),
                (
                    "cooldown_period_ms",
                    models.PositiveIntegerField(
                        help_text="Pot cooldown period in ms.",
                        verbose_name="cooldown period in ms",
                    ),
                ),
                (
                    "all_paid_out",
                    models.BooleanField(
                        help_text="All paid out.", verbose_name="all paid out"
                    ),
                ),
                (
                    "protocol_config_provider",
                    models.CharField(
                        help_text="Protocol config provider.",
                        max_length=64,
                        null=True,
                        verbose_name="protocol config provider",
                    ),
                ),
                (
                    "chef",
                    models.ForeignKey(
                        help_text="Pot chef.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chef_pots",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "deployer",
                    models.ForeignKey(
                        help_text="Pot deployer.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="deployed_pots",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Pot owner.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_pots",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Activity id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="activity id",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Activity timestamp.",
                        verbose_name="timestamp",
                    ),
                ),
                (
                    "action_result",
                    models.JSONField(
                        help_text="Activity action result.",
                        null=True,
                        verbose_name="action result",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Donate_Direct", "Donate Direct"),
                            ("Donate_Pot_Public", "Donate Pot Public"),
                            ("Donate_Pot_Matching_Pool", "Donate Pot Matching Pool"),
                            ("Register", "Register"),
                            ("Register_Batch", "Register Batch"),
                            ("Deploy_Pot", "Deploy Pot"),
                            ("Process_Payouts", "Process Payouts"),
                            ("Challenge_Payout", "Challenge Payout"),
                            ("Submit_Application", "Submit Application"),
                            ("Update_Pot_Config", "Update Pot Config"),
                            ("Add_List_Admin", "Add List Admin"),
                            ("Remove_List_Admin", "Remove List Admin"),
                        ],
                        help_text="Activity type.",
                        max_length=32,
                        verbose_name="type",
                    ),
                ),
                (
                    "receiver",
                    models.ForeignKey(
                        help_text="Receiver.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_activities",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "signer",
                    models.ForeignKey(
                        help_text="Signer.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="signed_activities",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="List",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="List id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="list id",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="List name.", max_length=64, verbose_name="name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="List description.",
                        max_length=256,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "cover_image_url",
                    models.URLField(
                        help_text="Cover image url.",
                        null=True,
                        verbose_name="cover image url",
                    ),
                ),
                (
                    "admin_only_registrations",
                    models.BooleanField(
                        help_text="Admin only registrations.",
                        verbose_name="admin only registrations",
                    ),
                ),
                (
                    "default_registration_status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                            ("Graylisted", "Graylisted"),
                            ("Blacklisted", "Blacklisted"),
                        ],
                        help_text="Default registration status.",
                        max_length=32,
                        verbose_name="default registration status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        help_text="List creation date.", verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        help_text="List last update date.", verbose_name="updated at"
                    ),
                ),
                (
                    "admins",
                    models.ManyToManyField(
                        help_text="List admins.",
                        related_name="admin_lists",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="List owner.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lists",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ListRegistration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Registration id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="registration id",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                            ("Graylisted", "Graylisted"),
                            ("Blacklisted", "Blacklisted"),
                        ],
                        help_text="Registration status.",
                        max_length=32,
                        verbose_name="registration status",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        help_text="Registration submission date.",
                        verbose_name="submitted at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        help_text="Registration last update date.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "registrant_notes",
                    models.TextField(
                        help_text="Registrant notes.",
                        max_length=1024,
                        null=True,
                        verbose_name="registrant notes",
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        help_text="Admin notes.",
                        max_length=1024,
                        null=True,
                        verbose_name="admin notes",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        null=True,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        help_text="List registered.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registrations",
                        to="indexer_app.list",
                    ),
                ),
                (
                    "registrant",
                    models.ForeignKey(
                        help_text="Account that registered on the list.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registered_lists",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ListUpvote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Upvote id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="upvote id",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        help_text="Upvote creation date.", verbose_name="created at"
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        help_text="Account that upvoted the list.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="upvoted_lists",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        help_text="List upvoted.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="upvotes",
                        to="indexer_app.list",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PotApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Application id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="application id",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Application message.",
                        max_length=1024,
                        null=True,
                        verbose_name="message",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                            ("InReview", "InReview"),
                        ],
                        help_text="Application status.",
                        max_length=32,
                        verbose_name="status",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Application submission date.",
                        verbose_name="submitted at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        help_text="Application last update date.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "applicant",
                    models.ForeignKey(
                        help_text="Account that applied to the pot.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pot_applications",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "pot",
                    models.ForeignKey(
                        help_text="Pot applied to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="indexer_app.pot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PotApplicationReview",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Review id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="review id",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        help_text="Review notes.",
                        max_length=1024,
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                            ("InReview", "InReview"),
                        ],
                        help_text="Application status for this review.",
                        max_length=32,
                        verbose_name="status",
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        help_text="Review date.", verbose_name="reviewed at"
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        help_text="Application reviewed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="indexer_app.potapplication",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="Account that reviewed the application.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pot_application_reviews",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PotPayout",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Payout id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="payout id",
                    ),
                ),
                (
                    "amount",
                    models.CharField(
                        help_text="Payout amount.", max_length=64, verbose_name="amount"
                    ),
                ),
                (
                    "amount_paid_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Payout amount in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="amount paid in USD",
                    ),
                ),
                (
                    "paid_at",
                    models.DateTimeField(
                        db_index=True, help_text="Payout date.", verbose_name="paid at"
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "ft",
                    models.ForeignKey(
                        help_text="Payout FT.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ft_pot_payouts",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        help_text="Payout recipient.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pot_payouts",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PotPayoutChallenge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Challenge id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="challenge id",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        help_text="Challenge creation date.", verbose_name="created at"
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Challenge message.",
                        max_length=1024,
                        verbose_name="message",
                    ),
                ),
                (
                    "challenger",
                    models.ForeignKey(
                        help_text="Payout challenger.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pot_payout_challenges",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "pot",
                    models.ForeignKey(
                        help_text="Pot challenged.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenges",
                        to="indexer_app.pot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PotPayoutChallengeAdminResponse",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Admin response id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Admin response id",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        help_text="Admin response creation date.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Admin response message.",
                        max_length=1024,
                        verbose_name="message",
                    ),
                ),
                (
                    "resolved",
                    models.BooleanField(
                        help_text="Admin response resolution status.",
                        verbose_name="resolved",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "admin",
                    models.ForeignKey(
                        help_text="Admin that responded to the challenge.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pot_payout_challenge_admin_responses",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        help_text="Challenge responded to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_responses",
                        to="indexer_app.potpayoutchallenge",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Donation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Donation id.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="donation id",
                    ),
                ),
                (
                    "total_amount",
                    models.CharField(
                        help_text="Total amount.",
                        max_length=64,
                        verbose_name="total amount",
                    ),
                ),
                (
                    "total_amount_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="total amount in USD",
                    ),
                ),
                (
                    "net_amount",
                    models.CharField(
                        help_text="Net amount.",
                        max_length=64,
                        verbose_name="net amount",
                    ),
                ),
                (
                    "net_amount_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Net amount in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="net amount in USD",
                    ),
                ),
                (
                    "matching_pool",
                    models.BooleanField(
                        help_text="Matching pool.", verbose_name="matching pool"
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Donation message.",
                        max_length=1024,
                        null=True,
                        verbose_name="message",
                    ),
                ),
                (
                    "donated_at",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Donation date.",
                        verbose_name="donated at",
                    ),
                ),
                (
                    "protocol_fee",
                    models.CharField(
                        help_text="Protocol fee.",
                        max_length=64,
                        verbose_name="protocol fee",
                    ),
                ),
                (
                    "protocol_fee_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Protocol fee in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="protocol fee in USD",
                    ),
                ),
                (
                    "referrer_fee",
                    models.CharField(
                        help_text="Referrer fee.",
                        max_length=64,
                        verbose_name="referrer fee",
                    ),
                ),
                (
                    "referrer_fee_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Referrer fee in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="referrer fee in USD",
                    ),
                ),
                (
                    "chef_fee",
                    models.CharField(
                        help_text="Chef fee.", max_length=64, verbose_name="chef fee"
                    ),
                ),
                (
                    "chef_fee_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Chef fee in USD.",
                        max_digits=20,
                        null=True,
                        verbose_name="chef fee in USD",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash.",
                        max_length=64,
                        verbose_name="transaction hash",
                    ),
                ),
                (
                    "chef",
                    models.ForeignKey(
                        help_text="Donation chef.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chef_donations",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "donor",
                    models.ForeignKey(
                        help_text="Donor.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="donations",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "ft",
                    models.ForeignKey(
                        help_text="Donation FT.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ft_donations",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        help_text="Donation recipient.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_donations",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "referrer",
                    models.ForeignKey(
                        help_text="Donation referrer.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="referral_donations",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "pot",
                    models.ForeignKey(
                        help_text="Donation pot.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="donations",
                        to="indexer_app.pot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PotFactory",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        help_text="Pot factory account ID.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="pot_factory",
                        serialize=False,
                        to="indexer_app.account",
                    ),
                ),
                (
                    "deployed_at",
                    models.DateTimeField(
                        help_text="Pot factory deployment date.",
                        verbose_name="deployed at",
                    ),
                ),
                (
                    "source_metadata",
                    models.JSONField(
                        help_text="Pot factory source metadata.",
                        null=True,
                        verbose_name="source metadata",
                    ),
                ),
                (
                    "protocol_fee_basis_points",
                    models.PositiveIntegerField(
                        help_text="Pot factory protocol fee basis points.",
                        verbose_name="protocol fee basis points",
                    ),
                ),
                (
                    "require_whitelist",
                    models.BooleanField(
                        help_text="Require whitelist.", verbose_name="require whitelist"
                    ),
                ),
                (
                    "admins",
                    models.ManyToManyField(
                        help_text="Pot factory admins.",
                        related_name="admin_pot_factories",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Pot factory owner.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_pot_factories",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "protocol_fee_recipient",
                    models.ForeignKey(
                        help_text="Pot factory protocol fee recipient.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pot_factories_protocol_fee_recipient",
                        to="indexer_app.account",
                    ),
                ),
                (
                    "whitelisted_deployers",
                    models.ManyToManyField(
                        help_text="Pot factory whitelisted deployers.",
                        related_name="whitelisted_pot_factories",
                        to="indexer_app.account",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="pot",
            name="pot_factory",
            field=models.ForeignKey(
                help_text="Pot factory.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pots",
                to="indexer_app.potfactory",
            ),
        ),
        migrations.AddIndex(
            model_name="list",
            index=models.Index(
                fields=["created_at", "updated_at"], name="idx_list_stamps"
            ),
        ),
        migrations.AddIndex(
            model_name="listregistration",
            index=models.Index(fields=["id", "status"], name="idx_list_id_status"),
        ),
        migrations.AddIndex(
            model_name="pot",
            index=models.Index(
                fields=["application_start", "application_end"],
                name="idx_application_period",
            ),
        ),
        migrations.AddIndex(
            model_name="pot",
            index=models.Index(
                fields=["matching_round_start", "matching_round_end"],
                name="idx_matching_period",
            ),
        ),
    ]
